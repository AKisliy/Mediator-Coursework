generator client {
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  provider      = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DB_URL")
  directUrl = env("PRISMA_DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  username            String?
  email               String?   @unique
  password            String?
  searches_count      Int       @default(0)
  emailVerified       DateTime? @map("email_verified")
  image               String?
  refreshToken        String?   @map("refresh_token")
  refreshTokenExpires DateTime? @map("refresh_token_expires")

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  accounts     Account[]
  sessions     Session[]
  planPurchase DateTime  @default(now())

  planId   Int          @default(1)
  plan     Plan         @relation(fields: [planId], references: [id])
  searches UserSearch[]
  filters  UserFilter[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("password_reset_tokens")
}

model Plan {
  id            Int    @id @default(autoincrement())
  name          String
  monthly_limit Int
  users         User[]

  @@map("plans")
}

model UserSearch {
  id        String    @id @db.Uuid
  createdAt DateTime  @default(now())
  query     String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  bloggers  Blogger[]

  @@map("user_searches")
}

model Blogger {
  id              String       @id
  username        String
  image_link      String?
  followers_count Int
  description     String?
  category        String?
  social_media    SocialMedia
  searches        UserSearch[]

  @@map("bloggers")
}

model UserFilter {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  filters   Json
  userId    String
  User      User     @relation(fields: [userId], references: [id])

  @@map("user_filters")
}

enum SocialMedia {
  Telegram
  Instagram

  @@map("social_media")
}
