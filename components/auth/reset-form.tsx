'use client';

import { authenticate, resetPassword } from '@/app/actions/auth.action';
import { toast } from '@/hooks/use-toast';
import { ResetSchema } from '@/schemas';
import { zodResolver } from '@hookform/resolvers/zod';
import { QuestionMarkCircledIcon } from '@radix-ui/react-icons';
import { TooltipProvider, TooltipTrigger } from '@radix-ui/react-tooltip';
import { Loader2 } from 'lucide-react';
import { useState } from 'react';
import { useFormState } from 'react-dom';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { Button } from '../ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '../ui/form';
import { Input } from '../ui/input';
import { Tooltip, TooltipContent } from '../ui/tooltip';
import CardWrapper from './card-wrapper';
import PrivacyPolicy from './privacy-policy';

export function ResetForm() {
  const [state, formAction] = useFormState(authenticate, null);
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<z.infer<typeof ResetSchema>>({
    resolver: zodResolver(ResetSchema),
    defaultValues: {
      email: ''
    }
  });

  const onSubmit = async (data: z.infer<typeof ResetSchema>) => {
    setIsLoading(true);

    try {
      const res = await resetPassword(data);
      console.log(res);

      if (res?.error) {
        toast({
          title: '–û—à–∏–±–∫–∞ ‚ò†Ô∏è',
          description: res.error,
          variant: 'destructive'
        });
      } else if (res?.success) {
        console.log('Got success');
        toast({
          title: '–£—Å–ø–µ—Ö!‚ú®',
          description: '–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É'
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ ‚ò†Ô∏è',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <CardWrapper
        title={'–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?'}
        description={'–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –º—ã –ø–æ–º–æ–∂–µ–º üë®‚Äçüíª'}
        className="mb-4"
      >
        <Form {...form}>
          <form className="p-4 md:p-8" onSubmit={form.handleSubmit(onSubmit)}>
            <div className="flex flex-col gap-6">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <TooltipProvider>
                    <FormItem>
                      <FormLabel>
                        <Tooltip>
                          <div className="flex flex-row items-center">
                            –í–∞—à Email
                            <TooltipTrigger asChild>
                              <Button variant="link" className="p-1">
                                <QuestionMarkCircledIcon />
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                              <p>–í–≤–µ–¥–∏—Ç–µ email, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</p>
                            </TooltipContent>
                          </div>
                        </Tooltip>
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          placeholder="ilove@mediator.ru"
                          type="email"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  </TooltipProvider>
                )}
              />
              <Button type="submit" className="w-full" disabled={isLoading}>
                {!isLoading ? (
                  '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'
                ) : (
                  <div className="flex flex-row gap-2">
                    –ú–æ–º–µ–Ω—Ç... <Loader2 className="animate-spin" />
                  </div>
                )}
              </Button>
            </div>
          </form>
        </Form>
      </CardWrapper>

      <PrivacyPolicy />
    </>
  );
}
